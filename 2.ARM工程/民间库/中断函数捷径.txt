1.#include "sys.h" 
void Ex_NVIC_Config(u8 GPIO_x, u8 BITx, u8 TRIM)
外部中断配置函数
只针对GPIOA~G;不包括PVD,RTC和USB唤醒这三个
参数:
GPIOx:A~G
BITx:需要使能的位;
TRIM:触发模式,1,下升沿;2,上降沿;3，任意电平触发
该函数一次只能配置1个IO口,多个IO口,需多次调用
该函数会自动开启对应中断,以及屏蔽线

2.//设置NVIC 
//NVIC_PreemptionPriority:抢占优先级
//NVIC_SubPriority       :响应优先级
//NVIC_Channel           :中断编号
//NVIC_Group             :中断分组 0~4
//注意优先级不能超过设定的组的范围!否则会有意想不到的错误
//组划分:
//组0:0位抢占优先级,4位响应优先级
//组1:1位抢占优先级,3位响应优先级
//组2:2位抢占优先级,2位响应优先级
//组3:3位抢占优先级,1位响应优先级
//组4:4位抢占优先级,0位响应优先级
//NVIC_SubPriority和NVIC_PreemptionPriority的原则是,数值越小,越优先	   
void MY_NVIC_Init(u8 NVIC_PreemptionPriority,u8 NVIC_SubPriority,u8 NVIC_Channel,u8 NVIC_Group)	 
{ 
	u32 temp;	
	MY_NVIC_PriorityGroupConfig(NVIC_Group);//设置分组
	temp=NVIC_PreemptionPriority<<(4-NVIC_Group);	  
	temp|=NVIC_SubPriority&(0x0f>>NVIC_Group);
	temp&=0xf;								//取低四位  
	NVIC->ISER[NVIC_Channel/32]|=(1<<NVIC_Channel%32);//使能中断位(要清除的话,相反操作就OK) 
	NVIC->IP[NVIC_Channel]|=temp<<4;		//设置响应优先级和抢断优先级   	    	  				   
} 
3.定时器中断：
void Timer_init(u16 arr,u16  psc)
{
	TIM_TimeBaseInitTypeDef TIMER;
	NVIC_InitTypeDef NVIC0;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_  TIM2, ENABLE);
	/*****************Step1**********************************/
	TIMER.TIM_Period = arr;
	TIMER.TIM_Prescaler = psc;
	TIMER.TIM_ClockDivision = TIM_CKD_DIV1;
	TIMER.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit( , &TIMER);
	/********************Step2*******************************/
	TIM_ITConfig( , TIM_IT_Update,ENABLE);
	NVIC0.NVIC_IRQChannel= TIM2 _IRQn;
	NVIC0.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC0.NVIC_IRQChannelSubPriority = 3;
	NVIC0.NVIC_IRQChannelCmd=ENABLE;
	NVIC_Init(&NVIC0);
	/********************Step3*******************************/
	TIM_Cmd( TIM2, ENABLE);
}
/********************Step3*******************************/
void  TIM2_IRQHandler(void)
{
	if (TIM_GetITStatus( TIM2, TIM_IT_Update) == SET)
	{
		if(i%2==0){
		GPIO_ResetBits(GPIOA,GPIO_Pin_0);}
		else if(i%2==1){
			GPIO_SetBits(GPIOA,GPIO_Pin_0);
		}
		i++;
		TIM_ClearITPendingBit( TIM2, TIM_IT_Update);
		if(i>=100){i=0;}
	}
}
4.//初始化IO 串口1
//pclk2:PCLK2时钟频率(Mhz)
//bound:波特率 
void uart_init(u32 pclk2,u32 bound)
5.printf("OK?");
	通过串口打印“OK”