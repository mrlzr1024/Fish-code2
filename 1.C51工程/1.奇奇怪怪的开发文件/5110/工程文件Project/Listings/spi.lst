C51 COMPILER V9.57.0.0   SPI                                                               04/03/2022 10:57:21 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN ..\输出文件Output\spi.obj
COMPILER INVOKED BY: D:\keil5B\C51\BIN\C51.EXE spi.c COMPACT ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND CO
                    -DE LISTINCLUDE SYMBOLS PRINT(.\Listings\spi.lst) TABS(2) OBJECT(..\输出文件Output\spi.obj)

line level    source

   1          #include"spi.h"
   1      =1  #ifndef __SPI_H__
   2      =1  #define __SPI_H__
   3      =1  #include<reg52.h>
   1      =2  /*--------------------------------------------------------------------------
   2      =2  REG52.H
   3      =2  
   4      =2  Header file for generic 80C52 and 80C32 microcontroller.
   5      =2  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =2  All rights reserved.
   7      =2  --------------------------------------------------------------------------*/
   8      =2  
   9      =2  #ifndef __REG52_H__
  10      =2  #define __REG52_H__
  11      =2  
  12      =2  /*  BYTE Registers  */
  13      =2  sfr P0    = 0x80;
  14      =2  sfr P1    = 0x90;
  15      =2  sfr P2    = 0xA0;
  16      =2  sfr P3    = 0xB0;
  17      =2  sfr PSW   = 0xD0;
  18      =2  sfr ACC   = 0xE0;
  19      =2  sfr B     = 0xF0;
  20      =2  sfr SP    = 0x81;
  21      =2  sfr DPL   = 0x82;
  22      =2  sfr DPH   = 0x83;
  23      =2  sfr PCON  = 0x87;
  24      =2  sfr TCON  = 0x88;
  25      =2  sfr TMOD  = 0x89;
  26      =2  sfr TL0   = 0x8A;
  27      =2  sfr TL1   = 0x8B;
  28      =2  sfr TH0   = 0x8C;
  29      =2  sfr TH1   = 0x8D;
  30      =2  sfr IE    = 0xA8;
  31      =2  sfr IP    = 0xB8;
  32      =2  sfr SCON  = 0x98;
  33      =2  sfr SBUF  = 0x99;
  34      =2  
  35      =2  /*  8052 Extensions  */
  36      =2  sfr T2CON  = 0xC8;
  37      =2  sfr RCAP2L = 0xCA;
  38      =2  sfr RCAP2H = 0xCB;
  39      =2  sfr TL2    = 0xCC;
  40      =2  sfr TH2    = 0xCD;
  41      =2  
  42      =2  
  43      =2  /*  BIT Registers  */
  44      =2  /*  PSW  */
  45      =2  sbit CY    = PSW^7;
  46      =2  sbit AC    = PSW^6;
  47      =2  sbit F0    = PSW^5;
  48      =2  sbit RS1   = PSW^4;
  49      =2  sbit RS0   = PSW^3;
  50      =2  sbit OV    = PSW^2;
C51 COMPILER V9.57.0.0   SPI                                                               04/03/2022 10:57:21 PAGE 2   

  51      =2  sbit P     = PSW^0; //8052 only
  52      =2  
  53      =2  /*  TCON  */
  54      =2  sbit TF1   = TCON^7;
  55      =2  sbit TR1   = TCON^6;
  56      =2  sbit TF0   = TCON^5;
  57      =2  sbit TR0   = TCON^4;
  58      =2  sbit IE1   = TCON^3;
  59      =2  sbit IT1   = TCON^2;
  60      =2  sbit IE0   = TCON^1;
  61      =2  sbit IT0   = TCON^0;
  62      =2  
  63      =2  /*  IE  */
  64      =2  sbit EA    = IE^7;
  65      =2  sbit ET2   = IE^5; //8052 only
  66      =2  sbit ES    = IE^4;
  67      =2  sbit ET1   = IE^3;
  68      =2  sbit EX1   = IE^2;
  69      =2  sbit ET0   = IE^1;
  70      =2  sbit EX0   = IE^0;
  71      =2  
  72      =2  /*  IP  */
  73      =2  sbit PT2   = IP^5;
  74      =2  sbit PS    = IP^4;
  75      =2  sbit PT1   = IP^3;
  76      =2  sbit PX1   = IP^2;
  77      =2  sbit PT0   = IP^1;
  78      =2  sbit PX0   = IP^0;
  79      =2  
  80      =2  /*  P3  */
  81      =2  sbit RD    = P3^7;
  82      =2  sbit WR    = P3^6;
  83      =2  sbit T1    = P3^5;
  84      =2  sbit T0    = P3^4;
  85      =2  sbit INT1  = P3^3;
  86      =2  sbit INT0  = P3^2;
  87      =2  sbit TXD   = P3^1;
  88      =2  sbit RXD   = P3^0;
  89      =2  
  90      =2  /*  SCON  */
  91      =2  sbit SM0   = SCON^7;
  92      =2  sbit SM1   = SCON^6;
  93      =2  sbit SM2   = SCON^5;
  94      =2  sbit REN   = SCON^4;
  95      =2  sbit TB8   = SCON^3;
  96      =2  sbit RB8   = SCON^2;
  97      =2  sbit TI    = SCON^1;
  98      =2  sbit RI    = SCON^0;
  99      =2  
 100      =2  /*  P1  */
 101      =2  sbit T2EX  = P1^1; // 8052 only
 102      =2  sbit T2    = P1^0; // 8052 only
 103      =2               
 104      =2  /*  T2CON  */
 105      =2  sbit TF2    = T2CON^7;
 106      =2  sbit EXF2   = T2CON^6;
 107      =2  sbit RCLK   = T2CON^5;
 108      =2  sbit TCLK   = T2CON^4;
 109      =2  sbit EXEN2  = T2CON^3;
 110      =2  sbit TR2    = T2CON^2;
 111      =2  sbit C_T2   = T2CON^1;
 112      =2  sbit CP_RL2 = T2CON^0;
C51 COMPILER V9.57.0.0   SPI                                                               04/03/2022 10:57:21 PAGE 3   

 113      =2  
 114      =2  #endif
   4      =1  sbit LCD_CE=P1^1;
   5      =1  sbit LCD_DC=P1^2;
   6      =1  sbit SDIN=P1^3;
   7      =1  sbit SCLK=P1^4;
   8      =1  sbit LCD_RST=P1^0;
   9      =1  extern int font6x8[][6];
  10      =1  extern int blank[][6];
  11      =1  extern void LCD_write_byte(unsigned char dat, unsigned char command);//spi写数据或命令
  12      =1  extern   void LCD_init(void);
  13      =1  extern void LCD_write_char(int h[][6]);
  14      =1  extern void LCD_set_XY(unsigned char X, unsigned char Y);
  15      =1  extern void LCD_draw_bmp_pixel(unsigned char X,unsigned char Y,unsigned char *map, unsigned char Pix_x,uns
             -igned char Pix_y);
  16      =1  extern void display(unsigned char x,unsigned char y,int h[][6]);
  17      =1  #endif
   2          #include<reg52.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  REG52.H
   3      =1  
   4      =1  Header file for generic 80C52 and 80C32 microcontroller.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __REG52_H__
           =1 #define __REG52_H__
           =1 
           =1 /*  BYTE Registers  */
           =1 sfr P0    = 0x80;
           =1 sfr P1    = 0x90;
           =1 sfr P2    = 0xA0;
           =1 sfr P3    = 0xB0;
           =1 sfr PSW   = 0xD0;
           =1 sfr ACC   = 0xE0;
           =1 sfr B     = 0xF0;
           =1 sfr SP    = 0x81;
           =1 sfr DPL   = 0x82;
           =1 sfr DPH   = 0x83;
           =1 sfr PCON  = 0x87;
           =1 sfr TCON  = 0x88;
           =1 sfr TMOD  = 0x89;
           =1 sfr TL0   = 0x8A;
           =1 sfr TL1   = 0x8B;
           =1 sfr TH0   = 0x8C;
           =1 sfr TH1   = 0x8D;
           =1 sfr IE    = 0xA8;
           =1 sfr IP    = 0xB8;
           =1 sfr SCON  = 0x98;
           =1 sfr SBUF  = 0x99;
           =1 
           =1 /*  8052 Extensions  */
           =1 sfr T2CON  = 0xC8;
           =1 sfr RCAP2L = 0xCA;
           =1 sfr RCAP2H = 0xCB;
           =1 sfr TL2    = 0xCC;
           =1 sfr TH2    = 0xCD;
           =1 
           =1 
           =1 /*  BIT Registers  */
           =1 /*  PSW  */
C51 COMPILER V9.57.0.0   SPI                                                               04/03/2022 10:57:21 PAGE 4   

           =1 sbit CY    = PSW^7;
           =1 sbit AC    = PSW^6;
           =1 sbit F0    = PSW^5;
           =1 sbit RS1   = PSW^4;
           =1 sbit RS0   = PSW^3;
           =1 sbit OV    = PSW^2;
           =1 sbit P     = PSW^0; //8052 only
           =1 
           =1 /*  TCON  */
           =1 sbit TF1   = TCON^7;
           =1 sbit TR1   = TCON^6;
           =1 sbit TF0   = TCON^5;
           =1 sbit TR0   = TCON^4;
           =1 sbit IE1   = TCON^3;
           =1 sbit IT1   = TCON^2;
           =1 sbit IE0   = TCON^1;
           =1 sbit IT0   = TCON^0;
           =1 
           =1 /*  IE  */
           =1 sbit EA    = IE^7;
           =1 sbit ET2   = IE^5; //8052 only
           =1 sbit ES    = IE^4;
           =1 sbit ET1   = IE^3;
           =1 sbit EX1   = IE^2;
           =1 sbit ET0   = IE^1;
           =1 sbit EX0   = IE^0;
           =1 
           =1 /*  IP  */
           =1 sbit PT2   = IP^5;
           =1 sbit PS    = IP^4;
           =1 sbit PT1   = IP^3;
           =1 sbit PX1   = IP^2;
           =1 sbit PT0   = IP^1;
           =1 sbit PX0   = IP^0;
           =1 
           =1 /*  P3  */
           =1 sbit RD    = P3^7;
           =1 sbit WR    = P3^6;
           =1 sbit T1    = P3^5;
           =1 sbit T0    = P3^4;
           =1 sbit INT1  = P3^3;
           =1 sbit INT0  = P3^2;
           =1 sbit TXD   = P3^1;
           =1 sbit RXD   = P3^0;
           =1 
           =1 /*  SCON  */
           =1 sbit SM0   = SCON^7;
           =1 sbit SM1   = SCON^6;
           =1 sbit SM2   = SCON^5;
           =1 sbit REN   = SCON^4;
           =1 sbit TB8   = SCON^3;
           =1 sbit RB8   = SCON^2;
           =1 sbit TI    = SCON^1;
           =1 sbit RI    = SCON^0;
           =1 
           =1 /*  P1  */
           =1 sbit T2EX  = P1^1; // 8052 only
           =1 sbit T2    = P1^0; // 8052 only
           =1              
           =1 /*  T2CON  */
           =1 sbit TF2    = T2CON^7;
           =1 sbit EXF2   = T2CON^6;
C51 COMPILER V9.57.0.0   SPI                                                               04/03/2022 10:57:21 PAGE 5   

           =1 sbit RCLK   = T2CON^5;
           =1 sbit TCLK   = T2CON^4;
           =1 sbit EXEN2  = T2CON^3;
           =1 sbit TR2    = T2CON^2;
           =1 sbit C_T2   = T2CON^1;
           =1 sbit CP_RL2 = T2CON^0;
           =1 
           =1 #endif
   3          int font6x8[][6]={ 0x04,0x1C,0x3E,0x3E,0x1C,0x04 };
   4          int blank[][6]={0x00,0x00,0x00,0x00,0x00,0x00};
   5          void delay_1us(void){
   6   1      }
   7          /***********************************************************
   8          
   9          函数名称：LCD_write_byte
  10          
  11          函数功能：模拟SPI接口时序写数据/命令LCD
  12          
  13          入口参数：data    ：写入的数据；
  14          
  15                    command ：写数据/命令选择；
  16          
  17          出口参数：无
  18          
  19          备 注：
  20          
  21          ***********************************************************/
  22          void LCD_write_byte(unsigned char dat, unsigned char command){
  23   1        
  24   1      
  25   1          unsigned char i;
  26   1      
  27   1          LCD_CE = 0;                              //5110片选有效，允许输入数据
  28   1      
  29   1          if (command == 0)                        //写命令
  30   1      
  31   1               LCD_DC = 0;                         
  32   1      
  33   1          else  LCD_DC = 1;                    //写数据
  34   1      
  35   1            for(i=0;i<8;i++)                            //传送8bit数据
  36   1      
  37   1                  {
  38   2      
  39   2      if(dat&0x80)
  40   2      
  41   2                              SDIN = 1;
  42   2      
  43   2                        else
  44   2      
  45   2                              SDIN = 0;
  46   2      
  47   2                        SCLK = 0;
  48   2      
  49   2                        dat = dat << 1;
  50   2      
  51   2                        SCLK = 1;
  52   2      
  53   2      }
  54   1      
  55   1           LCD_CE = 1;                                //禁止5110
  56   1      
C51 COMPILER V9.57.0.0   SPI                                                               04/03/2022 10:57:21 PAGE 6   

  57   1        }
  58          /***********************************************************
  59          
  60          函数名称：LCD_clear
  61          
  62          函数功能：清屏Nakia5110
  63          
  64          入口参数：无
  65          
  66          出口参数：无
  67          
  68          备 注：
  69          
  70          ***********************************************************/
  71          void LCD_clear(void){
  72   1          unsigned int i;
  73   1      
  74   1          LCD_write_byte(0x0c, 0);//普通显示模式      
  75   1          LCD_write_byte(0x80, 0);//x起始坐标   
  76   1      
  77   1          for (i=0; i<504; i++)
  78   1            LCD_write_byte(0, 1);     
  79   1        }
  80          
  81            /***********************************************************
  82          
  83          函数名称：LCD_init
  84          
  85          函数功能：5110初始化
  86          
  87          入口参数：无
  88          
  89          出口参数：无
  90          
  91          备 注：
  92          
  93          ***********************************************************/
  94          
  95          void LCD_init(void){
  96   1      
  97   1          LCD_RST = 0;     // 产生一个让LCD复位的低电平脉冲
  98   1      
  99   1          delay_1us();
 100   1      
 101   1          LCD_RST = 1;
 102   1      
 103   1          LCD_CE = 0;     // 关闭LCD
 104   1      
 105   1          delay_1us();
 106   1      
 107   1          LCD_CE = 1;     // 使能LCD
 108   1      
 109   1          delay_1us();
 110   1      
 111   1          LCD_write_byte(0x21, 0);      // 使用扩展命令设置LCD模式
 112   1      
 113   1          LCD_write_byte(0xBD, 0);      // 设置液晶偏置电压，对比度调整
 114   1      
 115   1          LCD_write_byte(0x06, 0);      // 温度校正
 116   1      
 117   1          LCD_write_byte(0x13, 0);      // 1:48
 118   1      
C51 COMPILER V9.57.0.0   SPI                                                               04/03/2022 10:57:21 PAGE 7   

 119   1          LCD_write_byte(0x20, 0);      // 使用基本命令，V=0，水平寻址
 120   1      
 121   1          LCD_clear();                 // 清屏
 122   1      
 123   1          LCD_write_byte(0x0c, 0);      // 设定显示模式，正常显示
 124   1      
 125   1          LCD_CE = 0;      // 关闭LCD
 126   1      }
 127            
 128          /***********************************************************
 129          
 130          函数名称：LCD_set_XY
 131          
 132          函数功能：设置LCD初始坐标函数
 133          
 134          入口参数：X       ：0－83
 135          
 136                    Y       ：0－5
 137          
 138          出口参数：无
 139          
 140          备 注：
 141          
 142          ***********************************************************/
 143          void LCD_set_XY(unsigned char X, unsigned char Y){
 144   1        
 145   1         LCD_write_byte(0x40 | Y, 0);              // 行
 146   1      
 147   1         LCD_write_byte(0x80 | X, 0);        // 列
 148   1      
 149   1        }
 150          /***********************************************************
 151          
 152          函数名称：LCD_write_char
 153          
 154          函数功能：显示英文字符
 155          
 156          入口参数：c      :  显示的字符
 157          
 158          出口参数：无
 159          
 160          备 注：
 161          
 162          ***********************************************************/
 163          void LCD_write_char(int h[][6]){
 164   1      
 165   1          unsigned char line;
 166   1      
 167   1      //    c -= 32;                       //数组的行号
 168   1      
 169   1          for (line=0; line<6; line++)
 170   1      
 171   1              LCD_write_byte(h[0][line], 1);
 172   1      
 173   1      }
 174          
 175          void LCD_draw_bmp_pixel(unsigned char X,unsigned char Y,unsigned char *map, unsigned char Pix_x,unsigned c
             -har Pix_y){
 176   1          unsigned int i,n;
 177   1          unsigned char row;//计算位图所占行数
 178   1            if (Pix_y%8==0)             //如果为位图所占行数为整数
 179   1                 row=Pix_y/8;     
C51 COMPILER V9.57.0.0   SPI                                                               04/03/2022 10:57:21 PAGE 8   

 180   1            else
 181   1               row=Pix_y/8+1;            //如果为位图所占行数不是整数
 182   1            LCD_set_XY(X,Y);
 183   1          for (n=0;n<row;n++)            //换行
 184   1            {     
 185   2              for(i=0;i<Pix_x;i++)
 186   2                {     
 187   3                       LCD_set_XY(X+i,Y+n);
 188   3                   LCD_write_byte(map[i+n*Pix_x], 1);
 189   3                }                        
 190   2            }     
 191   1      }
 192          void display(unsigned char x,unsigned char y,int h[][6]){
 193   1        LCD_set_XY(x,y);
 194   1        LCD_write_char(h);
 195   1      }
C51 COMPILER V9.57.0.0   SPI                                                               04/03/2022 10:57:21 PAGE 9   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION delay_1us (BEGIN)
                                           ; SOURCE LINE # 5
                                           ; SOURCE LINE # 6
0000 22                RET     
             ; FUNCTION delay_1us (END)

             ; FUNCTION _LCD_write_byte (BEGIN)
                                           ; SOURCE LINE # 22
;---- Variable 'dat' assigned to Register 'R7' ----
;---- Variable 'command' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 27
0000 C291              CLR     LCD_CE
                                           ; SOURCE LINE # 29
0002 ED                MOV     A,R5
0003 7004              JNZ     ?C0002
                                           ; SOURCE LINE # 31
0005 C292              CLR     LCD_DC
0007 8002              SJMP    ?C0003
0009         ?C0002:
                                           ; SOURCE LINE # 33
0009 D292              SETB    LCD_DC
000B         ?C0003:
                                           ; SOURCE LINE # 35
;---- Variable 'i' assigned to Register 'R6' ----
000B E4                CLR     A
000C FE                MOV     R6,A
000D         ?C0004:
                                           ; SOURCE LINE # 37
                                           ; SOURCE LINE # 39
000D EF                MOV     A,R7
000E 30E704            JNB     ACC.7,?C0007
                                           ; SOURCE LINE # 41
0011 D293              SETB    SDIN
0013 8002              SJMP    ?C0008
0015         ?C0007:
                                           ; SOURCE LINE # 45
0015 C293              CLR     SDIN
0017         ?C0008:
                                           ; SOURCE LINE # 47
0017 C294              CLR     SCLK
                                           ; SOURCE LINE # 49
0019 EF                MOV     A,R7
001A 25E0              ADD     A,ACC
001C FF                MOV     R7,A
                                           ; SOURCE LINE # 51
001D D294              SETB    SCLK
                                           ; SOURCE LINE # 53
001F 0E                INC     R6
0020 EE                MOV     A,R6
0021 B408E9            CJNE    A,#08H,?C0004
0024         ?C0005:
                                           ; SOURCE LINE # 55
0024 D291              SETB    LCD_CE
                                           ; SOURCE LINE # 57
0026 22                RET     
             ; FUNCTION _LCD_write_byte (END)

             ; FUNCTION LCD_clear (BEGIN)
                                           ; SOURCE LINE # 71
C51 COMPILER V9.57.0.0   SPI                                                               04/03/2022 10:57:21 PAGE 10  

                                           ; SOURCE LINE # 74
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 7F0C              MOV     R7,#0CH
0004 120000      R     LCALL   _LCD_write_byte
                                           ; SOURCE LINE # 75
0007 7F80              MOV     R7,#080H
0009 120000      R     LCALL   _LCD_write_byte
                                           ; SOURCE LINE # 77
;---- Variable 'i' assigned to Register 'R2/R3' ----
000C E4                CLR     A
000D FB                MOV     R3,A
000E FA                MOV     R2,A
000F         ?C0010:
                                           ; SOURCE LINE # 78
000F 7D01              MOV     R5,#01H
0011 E4                CLR     A
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _LCD_write_byte
0016 0B                INC     R3
0017 BB0001            CJNE    R3,#00H,?C0030
001A 0A                INC     R2
001B         ?C0030:
001B BA01F1            CJNE    R2,#01H,?C0010
001E BBF8EE            CJNE    R3,#0F8H,?C0010
                                           ; SOURCE LINE # 79
0021         ?C0013:
0021 22                RET     
             ; FUNCTION LCD_clear (END)

             ; FUNCTION LCD_init (BEGIN)
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 97
0000 C290              CLR     LCD_RST
                                           ; SOURCE LINE # 99
0002 120000      R     LCALL   delay_1us
                                           ; SOURCE LINE # 101
0005 D290              SETB    LCD_RST
                                           ; SOURCE LINE # 103
0007 C291              CLR     LCD_CE
                                           ; SOURCE LINE # 105
0009 120000      R     LCALL   delay_1us
                                           ; SOURCE LINE # 107
000C D291              SETB    LCD_CE
                                           ; SOURCE LINE # 109
000E 120000      R     LCALL   delay_1us
                                           ; SOURCE LINE # 111
0011 E4                CLR     A
0012 FD                MOV     R5,A
0013 7F21              MOV     R7,#021H
0015 120000      R     LCALL   _LCD_write_byte
                                           ; SOURCE LINE # 113
0018 7FBD              MOV     R7,#0BDH
001A 120000      R     LCALL   _LCD_write_byte
                                           ; SOURCE LINE # 115
001D 7F06              MOV     R7,#06H
001F 120000      R     LCALL   _LCD_write_byte
                                           ; SOURCE LINE # 117
0022 7F13              MOV     R7,#013H
0024 120000      R     LCALL   _LCD_write_byte
                                           ; SOURCE LINE # 119
0027 7F20              MOV     R7,#020H
C51 COMPILER V9.57.0.0   SPI                                                               04/03/2022 10:57:21 PAGE 11  

0029 120000      R     LCALL   _LCD_write_byte
                                           ; SOURCE LINE # 121
002C 120000      R     LCALL   LCD_clear
                                           ; SOURCE LINE # 123
002F E4                CLR     A
0030 FD                MOV     R5,A
0031 7F0C              MOV     R7,#0CH
0033 120000      R     LCALL   _LCD_write_byte
                                           ; SOURCE LINE # 125
0036 C291              CLR     LCD_CE
                                           ; SOURCE LINE # 126
0038 22                RET     
             ; FUNCTION LCD_init (END)

             ; FUNCTION _LCD_set_XY (BEGIN)
                                           ; SOURCE LINE # 143
;---- Variable 'Y' assigned to Register 'R5' ----
;---- Variable 'X' assigned to Register 'R4' ----
0000 AC07              MOV     R4,AR7
                                           ; SOURCE LINE # 145
0002 ED                MOV     A,R5
0003 4440              ORL     A,#040H
0005 FF                MOV     R7,A
0006 E4                CLR     A
0007 FD                MOV     R5,A
0008 120000      R     LCALL   _LCD_write_byte
                                           ; SOURCE LINE # 147
000B EC                MOV     A,R4
000C 4480              ORL     A,#080H
000E FF                MOV     R7,A
000F 020000      R     LJMP    _LCD_write_byte
             ; FUNCTION _LCD_set_XY (END)

             ; FUNCTION _LCD_write_char (BEGIN)
                                           ; SOURCE LINE # 163
0000 7800        R     MOV     R0,#LOW h
0002 EB                MOV     A,R3
0003 F2                MOVX    @R0,A
0004 08                INC     R0
0005 EA                MOV     A,R2
0006 F2                MOVX    @R0,A
0007 08                INC     R0
0008 E9                MOV     A,R1
0009 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 169
;---- Variable 'line' assigned to Register 'R4' ----
000A E4                CLR     A
000B FC                MOV     R4,A
000C         ?C0016:
                                           ; SOURCE LINE # 171
000C 7800        R     MOV     R0,#LOW h
000E E2                MOVX    A,@R0
000F FB                MOV     R3,A
0010 08                INC     R0
0011 E2                MOVX    A,@R0
0012 FA                MOV     R2,A
0013 08                INC     R0
0014 E2                MOVX    A,@R0
0015 F9                MOV     R1,A
0016 75F002            MOV     B,#02H
0019 EC                MOV     A,R4
001A A4                MUL     AB
C51 COMPILER V9.57.0.0   SPI                                                               04/03/2022 10:57:21 PAGE 12  

001B F582              MOV     DPL,A
001D 85F083            MOV     DPH,B
0020 120000      E     LCALL   ?C?ILDOPTR
0023 FF                MOV     R7,A
0024 7D01              MOV     R5,#01H
0026 120000      R     LCALL   _LCD_write_byte
0029 0C                INC     R4
002A EC                MOV     A,R4
002B B406DE            CJNE    A,#06H,?C0016
                                           ; SOURCE LINE # 173
002E         ?C0019:
002E 22                RET     
             ; FUNCTION _LCD_write_char (END)

             ; FUNCTION _LCD_draw_bmp_pixel (BEGIN)
                                           ; SOURCE LINE # 175
0000 7800        R     MOV     R0,#LOW X
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
0004 08                INC     R0
0005 ED                MOV     A,R5
0006 F2                MOVX    @R0,A
;---- Variable 'map' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 178
0007 7800        R     MOV     R0,#LOW Pix_y
0009 E2                MOVX    A,@R0
000A FF                MOV     R7,A
000B 5407              ANL     A,#07H
000D 7008              JNZ     ?C0020
                                           ; SOURCE LINE # 179
000F EF                MOV     A,R7
0010 13                RRC     A
0011 13                RRC     A
0012 13                RRC     A
0013 541F              ANL     A,#01FH
0015 8009              SJMP    ?C0031
0017         ?C0020:
                                           ; SOURCE LINE # 181
0017 7800        R     MOV     R0,#LOW Pix_y
0019 E2                MOVX    A,@R0
001A 13                RRC     A
001B 13                RRC     A
001C 13                RRC     A
001D 541F              ANL     A,#01FH
001F 04                INC     A
0020         ?C0031:
0020 7800        R     MOV     R0,#LOW row
0022 F2                MOVX    @R0,A
0023         ?C0021:
                                           ; SOURCE LINE # 182
0023 7800        R     MOV     R0,#LOW X
0025 E2                MOVX    A,@R0
0026 FF                MOV     R7,A
0027 08                INC     R0
0028 E2                MOVX    A,@R0
0029 FD                MOV     R5,A
002A 120000      R     LCALL   _LCD_set_XY
                                           ; SOURCE LINE # 183
002D E4                CLR     A
002E 7800        R     MOV     R0,#LOW n
0030 F2                MOVX    @R0,A
0031 08                INC     R0
C51 COMPILER V9.57.0.0   SPI                                                               04/03/2022 10:57:21 PAGE 13  

0032 F2                MOVX    @R0,A
0033         ?C0022:
0033 7800        R     MOV     R0,#LOW row
0035 E2                MOVX    A,@R0
0036 FF                MOV     R7,A
0037 C3                CLR     C
0038 18                DEC     R0
0039 E2                MOVX    A,@R0
003A 9F                SUBB    A,R7
003B 18                DEC     R0
003C E2                MOVX    A,@R0
003D 9400              SUBB    A,#00H
003F 5069              JNC     ?C0028
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
0041 E4                CLR     A
0042 7800        R     MOV     R0,#LOW i
0044 F2                MOVX    @R0,A
0045 08                INC     R0
0046 F2                MOVX    @R0,A
0047         ?C0025:
0047 7800        R     MOV     R0,#LOW Pix_x
0049 E2                MOVX    A,@R0
004A FF                MOV     R7,A
004B 7800        R     MOV     R0,#LOW i
004D E2                MOVX    A,@R0
004E FC                MOV     R4,A
004F 08                INC     R0
0050 E2                MOVX    A,@R0
0051 FD                MOV     R5,A
0052 C3                CLR     C
0053 9F                SUBB    A,R7
0054 EC                MOV     A,R4
0055 9400              SUBB    A,#00H
0057 5044              JNC     ?C0024
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
0059 7800        R     MOV     R0,#LOW X
005B E2                MOVX    A,@R0
005C 2D                ADD     A,R5
005D FF                MOV     R7,A
005E 7800        R     MOV     R0,#LOW n
0060 08                INC     R0
0061 E2                MOVX    A,@R0
0062 FE                MOV     R6,A
0063 7800        R     MOV     R0,#LOW Y
0065 E2                MOVX    A,@R0
0066 2E                ADD     A,R6
0067 FD                MOV     R5,A
0068 120000      R     LCALL   _LCD_set_XY
                                           ; SOURCE LINE # 188
006B 7800        R     MOV     R0,#LOW Pix_x
006D E2                MOVX    A,@R0
006E FF                MOV     R7,A
006F 7E00              MOV     R6,#00H
0071 7800        R     MOV     R0,#LOW n
0073 E2                MOVX    A,@R0
0074 FC                MOV     R4,A
0075 08                INC     R0
0076 E2                MOVX    A,@R0
0077 FD                MOV     R5,A
0078 120000      E     LCALL   ?C?IMUL
C51 COMPILER V9.57.0.0   SPI                                                               04/03/2022 10:57:21 PAGE 14  

007B 7800        R     MOV     R0,#LOW i+01H
007D E2                MOVX    A,@R0
007E 2F                ADD     A,R7
007F FF                MOV     R7,A
0080 18                DEC     R0
0081 E2                MOVX    A,@R0
0082 3E                ADDC    A,R6
0083 8F82              MOV     DPL,R7
0085 F583              MOV     DPH,A
0087 120000      E     LCALL   ?C?CLDOPTR
008A FF                MOV     R7,A
008B 7D01              MOV     R5,#01H
008D 120000      R     LCALL   _LCD_write_byte
                                           ; SOURCE LINE # 189
0090 7800        R     MOV     R0,#LOW i+01H
0092 E2                MOVX    A,@R0
0093 2401              ADD     A,#01H
0095 F2                MOVX    @R0,A
0096 18                DEC     R0
0097 E2                MOVX    A,@R0
0098 3400              ADDC    A,#00H
009A F2                MOVX    @R0,A
009B 80AA              SJMP    ?C0025
                                           ; SOURCE LINE # 190
009D         ?C0024:
009D 7800        R     MOV     R0,#LOW n+01H
009F E2                MOVX    A,@R0
00A0 2401              ADD     A,#01H
00A2 F2                MOVX    @R0,A
00A3 18                DEC     R0
00A4 E2                MOVX    A,@R0
00A5 3400              ADDC    A,#00H
00A7 F2                MOVX    @R0,A
00A8 8089              SJMP    ?C0022
                                           ; SOURCE LINE # 191
00AA         ?C0028:
00AA 22                RET     
             ; FUNCTION _LCD_draw_bmp_pixel (END)

             ; FUNCTION _display (BEGIN)
                                           ; SOURCE LINE # 192
;---- Variable 'x' assigned to Register 'R7' ----
;---- Variable 'h' assigned to Register 'R1/R2/R3' ----
;---- Variable 'y' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 193
0000 120000      R     LCALL   _LCD_set_XY
                                           ; SOURCE LINE # 194
0003 020000      R     LJMP    _LCD_write_char
             ; FUNCTION _display (END)

C51 COMPILER V9.57.0.0   SPI                                                               04/03/2022 10:57:21 PAGE 15  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
blank. . . . . . . . . . . . . . . . .  PUBLIC   PDATA  ARRAY    0000H  12
_LCD_draw_bmp_pixel. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  X. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  Y. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
  map. . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0001H  3
  Pix_x. . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0005H  1
  Pix_y. . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0006H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0007H  2
  n. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0009H  2
  row. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   000BH  1
delay_1us. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
_LCD_set_XY. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  X. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  Y. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
font6x8. . . . . . . . . . . . . . . .  PUBLIC   PDATA  ARRAY    000CH  12
LCD_RST. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
SCLK . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
SDIN . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
LCD_DC . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
LCD_CE . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
LCD_clear. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
_LCD_write_char. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  h. . . . . . . . . . . . . . . . . .  AUTO     PDATA  PTR      0000H  3
  line . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
LCD_init . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_LCD_write_byte. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  command. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
_display . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  x. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  y. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  h. . . . . . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    373    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     24      15
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
